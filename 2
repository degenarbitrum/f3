def func1(arg1, arg2):
    if arg2 < arg1:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(27):
        var7.func3(arg2, arg2)
    if arg1 < arg2:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in xrange(25):
        var15 = var13.func7
        var15(var14, arg2)
    var16 = func12()
    var23 = var19(var16, arg2)
    var50 = func16(arg1, var23)
    var51 = (924 - 1344508964) - var50 - -1284673872
    var52 = var16 ^ var16 ^ 2133492664 | var51
    var53 = arg1 | var50 ^ arg1 & var52
    var54 = var51 + (var51 & var16) + arg2
    var55 = (var16 + var16 + -819) + var54
    var56 = var51 - var51 ^ var53 & var16
    var57 = arg1 | arg2
    if var57 < var50:
        var58 = var54 ^ arg1
    else:
        var58 = var55 ^ 404 ^ arg2 & var54
    var59 = var50 - 80
    var60 = var51 - (var55 + var16) - -332
    var61 = var23 - var51 - var16 - var56
    var62 = (-825 + var50) ^ arg1
    var63 = (var54 & var53 ^ arg1) ^ var50
    result = var50 - var55
    return result
def func16(arg24, arg25):
    var26 = arg24 ^ arg24
    var27 = arg25 - (arg25 ^ var26 - arg24)
    var28 = -65 + arg25
    if var26 < var27:
        var29 = (803 - var27) - (var27 ^ var27)
    else:
        var29 = var28 - (arg24 + (var28 - var26))
    var30 = -1723973010 & 614 & var28
    var31 = arg24 ^ (var30 | var28) + -660
    var32 = (var31 - (var30 | arg24)) - -1508466143
    var33 = var32 + var26 ^ var27 ^ 2140445279
    var34 = (-633 & var28) & var27 + var28
    var35 = arg24 ^ var34
    var36 = var33 & var33
    if var30 < var30:
        var37 = -502170425 & var36
    else:
        var37 = var26 - (var27 - var35 & var30)
    var38 = (arg25 ^ var33) & (var31 + -279404032)
    var39 = var33 - var31 ^ var30
    var40 = var35 & var28
    var41 = var34 | arg25
    var42 = var28 ^ arg24 + var35
    var43 = var31 & arg24
    var44 = var34 - var26
    var45 = var39 & 567 | arg25 | var39
    var46 = var35 - -1905954095 - var30 | var35
    if var42 < var45:
        var47 = var43 & var45
    else:
        var47 = var32 & -624069994
    var48 = var36 | -24 & var30 | var41
    if var42 < var30:
        var49 = ((var27 - var44) + var41) & var46
    else:
        var49 = -712 ^ 1962650634 | var36 ^ var26
    result = var36 & var32 - var33 | var43
    return result
def func15(arg20, arg21):
    if arg20 < arg21:
        var22 = (-1148649282 ^ arg21) & -33 | 360
    else:
        var22 = arg21 - 191059776
    result = arg20 ^ arg21 - 72 ^ (arg20 ^ arg20 & (((arg20 & -852) - arg20) - arg20) | arg21 & arg20 | 724)
    return result
def func14():
    closure = [-5]
    def func13(arg17, arg18):
        closure[0] += func15(arg17, arg18)
        return closure[0]
    func = func13
    return func
var19 = func14()
def func12():
    func10()
    result = len(xrange(14))
    func11()
    return result
def func11():
    global len
    del len
def func10():
    global len
    len = lambda x : 3
class class8(object):
    def func7(self, arg11, arg12):
        return 0
class class6(object):
    def func7(self, arg9, arg10):
        return 0
class class4(object):
    def func3(self, arg5, arg6):
        result = arg5 + 1 + 0
        return result
class class2(class4):
    def func3(self, arg3, arg4):
        result = (((0 & arg4 + arg3 + arg3) - -1089847326) & arg4) | arg4
        return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 17'
    print 'arg_number: 64'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg2 < arg1:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(27):
        var7.func3(arg2, arg2)
    if arg1 < arg2:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in xrange(25):
        var15 = var13.func7
        var15(var14, arg2)
    var16 = func12()
    var23 = var19(var16, arg2)
    var50 = func16(arg1, var23)
    var51 = (924 - 1344508964) - var50 - -1284673872
    var52 = var16 ^ var16 ^ 2133492664 | var51
    var53 = arg1 | var50 ^ arg1 & var52
    var54 = var51 + (var51 & var16) + arg2
    var55 = (var16 + var16 + -819) + var54
    var56 = var51 - var51 ^ var53 & var16
    var57 = arg1 | arg2
    if var57 < var50:
        var58 = var54 ^ arg1
    else:
        var58 = var55 ^ 404 ^ arg2 & var54
    var59 = var50 - 80
    var60 = var51 - (var55 + var16) - -332
    var61 = var23 - var51 - var16 - var56
    var62 = (-825 + var50) ^ arg1
    var63 = (var54 & var53 ^ arg1) ^ var50
    result = var50 - var55
    return result
def func16(arg24, arg25):
    var26 = arg24 ^ arg24
    var27 = arg25 - (arg25 ^ var26 - arg24)
    var28 = -65 + arg25
    if var26 < var27:
        var29 = (803 - var27) - (var27 ^ var27)
    else:
        var29 = var28 - (arg24 + (var28 - var26))
    var30 = -1723973010 & 614 & var28
    var31 = arg24 ^ (var30 | var28) + -660
    var32 = (var31 - (var30 | arg24)) - -1508466143
    var33 = var32 + var26 ^ var27 ^ 2140445279
    var34 = (-633 & var28) & var27 + var28
    var35 = arg24 ^ var34
    var36 = var33 & var33
    if var30 < var30:
        var37 = -502170425 & var36
    else:
        var37 = var26 - (var27 - var35 & var30)
    var38 = (arg25 ^ var33) & (var31 + -279404032)
    var39 = var33 - var31 ^ var30
    var40 = var35 & var28
    var41 = var34 | arg25
    var42 = var28 ^ arg24 + var35
    var43 = var31 & arg24
    var44 = var34 - var26
    var45 = var39 & 567 | arg25 | var39
    var46 = var35 - -1905954095 - var30 | var35
    if var42 < var45:
        var47 = var43 & var45
    else:
        var47 = var32 & -624069994
    var48 = var36 | -24 & var30 | var41
    if var42 < var30:
        var49 = ((var27 - var44) + var41) & var46
    else:
        var49 = -712 ^ 1962650634 | var36 ^ var26
    result = var36 & var32 - var33 | var43
    return result
def func15(arg20, arg21):
    if arg20 < arg21:
        var22 = (-1148649282 ^ arg21) & -33 | 360
    else:
        var22 = arg21 - 191059776
    result = arg20 ^ arg21 - 72 ^ (arg20 ^ arg20 & (((arg20 & -852) - arg20) - arg20) | arg21 & arg20 | 724)
    return result
def func14():
    closure = [-5]
    def func13(arg17, arg18):
        closure[0] += func15(arg17, arg18)
        return closure[0]
    func = func13
    return func
var19 = func14()
def func12():
    func10()
    result = len(xrange(14))
    func11()
    return result
def func11():
    global len
    del len
def func10():
    global len
    len = lambda x : 3
class class8(object):
    def func7(self, arg11, arg12):
        return 0
class class6(object):
    def func7(self, arg9, arg10):
        return 0
class class4(object):
    def func3(self, arg5, arg6):
        result = arg5 + 1 + 0
        return result
class class2(class4):
    def func3(self, arg3, arg4):
        result = (((0 & arg4 + arg3 + arg3) - -1089847326) & arg4) | arg4
        return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 17'
    print 'arg_number: 64'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg2 < arg1:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(27):
        var7.func3(arg2, arg2)
    if arg1 < arg2:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in xrange(25):
        var15 = var13.func7
        var15(var14, arg2)
    var16 = func12()
    var23 = var19(var16, arg2)
    var50 = func16(arg1, var23)
    var51 = (924 - 1344508964) - var50 - -1284673872
    var52 = var16 ^ var16 ^ 2133492664 | var51
    var53 = arg1 | var50 ^ arg1 & var52
    var54 = var51 + (var51 & var16) + arg2
    var55 = (var16 + var16 + -819) + var54
    var56 = var51 - var51 ^ var53 & var16
    var57 = arg1 | arg2
    if var57 < var50:
        var58 = var54 ^ arg1
    else:
        var58 = var55 ^ 404 ^ arg2 & var54
    var59 = var50 - 80
    var60 = var51 - (var55 + var16) - -332
    var61 = var23 - var51 - var16 - var56
    var62 = (-825 + var50) ^ arg1
    var63 = (var54 & var53 ^ arg1) ^ var50
    result = var50 - var55
    return result
def func16(arg24, arg25):
    var26 = arg24 ^ arg24
    var27 = arg25 - (arg25 ^ var26 - arg24)
    var28 = -65 + arg25
    if var26 < var27:
        var29 = (803 - var27) - (var27 ^ var27)
    else:
        var29 = var28 - (arg24 + (var28 - var26))
    var30 = -1723973010 & 614 & var28
    var31 = arg24 ^ (var30 | var28) + -660
    var32 = (var31 - (var30 | arg24)) - -1508466143
    var33 = var32 + var26 ^ var27 ^ 2140445279
    var34 = (-633 & var28) & var27 + var28
    var35 = arg24 ^ var34
    var36 = var33 & var33
    if var30 < var30:
        var37 = -502170425 & var36
    else:
        var37 = var26 - (var27 - var35 & var30)
    var38 = (arg25 ^ var33) & (var31 + -279404032)
    var39 = var33 - var31 ^ var30
    var40 = var35 & var28
    var41 = var34 | arg25
    var42 = var28 ^ arg24 + var35
    var43 = var31 & arg24
    var44 = var34 - var26
    var45 = var39 & 567 | arg25 | var39
    var46 = var35 - -1905954095 - var30 | var35
    if var42 < var45:
        var47 = var43 & var45
    else:
        var47 = var32 & -624069994
    var48 = var36 | -24 & var30 | var41
    if var42 < var30:
        var49 = ((var27 - var44) + var41) & var46
    else:
        var49 = -712 ^ 1962650634 | var36 ^ var26
    result = var36 & var32 - var33 | var43
    return result
def func15(arg20, arg21):
    if arg20 < arg21:
        var22 = (-1148649282 ^ arg21) & -33 | 360
    else:
        var22 = arg21 - 191059776
    result = arg20 ^ arg21 - 72 ^ (arg20 ^ arg20 & (((arg20 & -852) - arg20) - arg20) | arg21 & arg20 | 724)
    return result
def func14():
    closure = [-5]
    def func13(arg17, arg18):
        closure[0] += func15(arg17, arg18)
        return closure[0]
    func = func13
    return func
var19 = func14()
def func12():
    func10()
    result = len(xrange(14))
    func11()
    return result
def func11():
    global len
    del len
def func10():
    global len
    len = lambda x : 3
class class8(object):
    def func7(self, arg11, arg12):
        return 0
class class6(object):
    def func7(self, arg9, arg10):
        return 0
class class4(object):
    def func3(self, arg5, arg6):
        result = arg5 + 1 + 0
        return result
class class2(class4):
    def func3(self, arg3, arg4):
        result = (((0 & arg4 + arg3 + arg3) - -1089847326) & arg4) | arg4
        return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 17'
    print 'arg_number: 64'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg2 < arg1:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(27):
        var7.func3(arg2, arg2)
    if arg1 < arg2:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in xrange(25):
        var15 = var13.func7
        var15(var14, arg2)
    var16 = func12()
    var23 = var19(var16, arg2)
    var50 = func16(arg1, var23)
    var51 = (924 - 1344508964) - var50 - -1284673872
    var52 = var16 ^ var16 ^ 2133492664 | var51
    var53 = arg1 | var50 ^ arg1 & var52
    var54 = var51 + (var51 & var16) + arg2
    var55 = (var16 + var16 + -819) + var54
    var56 = var51 - var51 ^ var53 & var16
    var57 = arg1 | arg2
    if var57 < var50:
        var58 = var54 ^ arg1
    else:
        var58 = var55 ^ 404 ^ arg2 & var54
    var59 = var50 - 80
    var60 = var51 - (var55 + var16) - -332
    var61 = var23 - var51 - var16 - var56
    var62 = (-825 + var50) ^ arg1
    var63 = (var54 & var53 ^ arg1) ^ var50
    result = var50 - var55
    return result
def func16(arg24, arg25):
    var26 = arg24 ^ arg24
    var27 = arg25 - (arg25 ^ var26 - arg24)
    var28 = -65 + arg25
    if var26 < var27:
        var29 = (803 - var27) - (var27 ^ var27)
    else:
        var29 = var28 - (arg24 + (var28 - var26))
    var30 = -1723973010 & 614 & var28
    var31 = arg24 ^ (var30 | var28) + -660
    var32 = (var31 - (var30 | arg24)) - -1508466143
    var33 = var32 + var26 ^ var27 ^ 2140445279
    var34 = (-633 & var28) & var27 + var28
    var35 = arg24 ^ var34
    var36 = var33 & var33
    if var30 < var30:
        var37 = -502170425 & var36
    else:
        var37 = var26 - (var27 - var35 & var30)
    var38 = (arg25 ^ var33) & (var31 + -279404032)
    var39 = var33 - var31 ^ var30
    var40 = var35 & var28
    var41 = var34 | arg25
    var42 = var28 ^ arg24 + var35
    var43 = var31 & arg24
    var44 = var34 - var26
    var45 = var39 & 567 | arg25 | var39
    var46 = var35 - -1905954095 - var30 | var35
    if var42 < var45:
        var47 = var43 & var45
    else:
        var47 = var32 & -624069994
    var48 = var36 | -24 & var30 | var41
    if var42 < var30:
        var49 = ((var27 - var44) + var41) & var46
    else:
        var49 = -712 ^ 1962650634 | var36 ^ var26
    result = var36 & var32 - var33 | var43
    return result
def func15(arg20, arg21):
    if arg20 < arg21:
        var22 = (-1148649282 ^ arg21) & -33 | 360
    else:
        var22 = arg21 - 191059776
    result = arg20 ^ arg21 - 72 ^ (arg20 ^ arg20 & (((arg20 & -852) - arg20) - arg20) | arg21 & arg20 | 724)
    return result
def func14():
    closure = [-5]
    def func13(arg17, arg18):
        closure[0] += func15(arg17, arg18)
        return closure[0]
    func = func13
    return func
var19 = func14()
def func12():
    func10()
    result = len(xrange(14))
    func11()
    return result
def func11():
    global len
    del len
def func10():
    global len
    len = lambda x : 3
class class8(object):
    def func7(self, arg11, arg12):
        return 0
class class6(object):
    def func7(self, arg9, arg10):
        return 0
class class4(object):
    def func3(self, arg5, arg6):
        result = arg5 + 1 + 0
        return result
class class2(class4):
    def func3(self, arg3, arg4):
        result = (((0 & arg4 + arg3 + arg3) - -1089847326) & arg4) | arg4
        return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 17'
    print 'arg_number: 64'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg2 < arg1:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(27):
        var7.func3(arg2, arg2)
    if arg1 < arg2:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in xrange(25):
        var15 = var13.func7
        var15(var14, arg2)
    var16 = func12()
    var23 = var19(var16, arg2)
    var50 = func16(arg1, var23)
    var51 = (924 - 1344508964) - var50 - -1284673872
    var52 = var16 ^ var16 ^ 2133492664 | var51
    var53 = arg1 | var50 ^ arg1 & var52
    var54 = var51 + (var51 & var16) + arg2
    var55 = (var16 + var16 + -819) + var54
    var56 = var51 - var51 ^ var53 & var16
    var57 = arg1 | arg2
    if var57 < var50:
        var58 = var54 ^ arg1
    else:
        var58 = var55 ^ 404 ^ arg2 & var54
    var59 = var50 - 80
    var60 = var51 - (var55 + var16) - -332
    var61 = var23 - var51 - var16 - var56
    var62 = (-825 + var50) ^ arg1
    var63 = (var54 & var53 ^ arg1) ^ var50
    result = var50 - var55
    return result
def func16(arg24, arg25):
    var26 = arg24 ^ arg24
    var27 = arg25 - (arg25 ^ var26 - arg24)
    var28 = -65 + arg25
    if var26 < var27:
        var29 = (803 - var27) - (var27 ^ var27)
    else:
        var29 = var28 - (arg24 + (var28 - var26))
    var30 = -1723973010 & 614 & var28
    var31 = arg24 ^ (var30 | var28) + -660
    var32 = (var31 - (var30 | arg24)) - -1508466143
    var33 = var32 + var26 ^ var27 ^ 2140445279
    var34 = (-633 & var28) & var27 + var28
    var35 = arg24 ^ var34
    var36 = var33 & var33
    if var30 < var30:
        var37 = -502170425 & var36
    else:
        var37 = var26 - (var27 - var35 & var30)
    var38 = (arg25 ^ var33) & (var31 + -279404032)
    var39 = var33 - var31 ^ var30
    var40 = var35 & var28
    var41 = var34 | arg25
    var42 = var28 ^ arg24 + var35
    var43 = var31 & arg24
    var44 = var34 - var26
    var45 = var39 & 567 | arg25 | var39
    var46 = var35 - -1905954095 - var30 | var35
    if var42 < var45:
        var47 = var43 & var45
    else:
        var47 = var32 & -624069994
    var48 = var36 | -24 & var30 | var41
    if var42 < var30:
        var49 = ((var27 - var44) + var41) & var46
    else:
        var49 = -712 ^ 1962650634 | var36 ^ var26
    result = var36 & var32 - var33 | var43
    return result
def func15(arg20, arg21):
    if arg20 < arg21:
        var22 = (-1148649282 ^ arg21) & -33 | 360
    else:
        var22 = arg21 - 191059776
    result = arg20 ^ arg21 - 72 ^ (arg20 ^ arg20 & (((arg20 & -852) - arg20) - arg20) | arg21 & arg20 | 724)
    return result
def func14():
    closure = [-5]
    def func13(arg17, arg18):
        closure[0] += func15(arg17, arg18)
        return closure[0]
    func = func13
    return func
var19 = func14()
def func12():
    func10()
    result = len(xrange(14))
    func11()
    return result
def func11():
    global len
    del len
def func10():
    global len
    len = lambda x : 3
class class8(object):
    def func7(self, arg11, arg12):
        return 0
class class6(object):
    def func7(self, arg9, arg10):
        return 0
class class4(object):
    def func3(self, arg5, arg6):
        result = arg5 + 1 + 0
        return result
class class2(class4):
    def func3(self, arg3, arg4):
        result = (((0 & arg4 + arg3 + arg3) - -1089847326) & arg4) | arg4
        return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 17'
    print 'arg_number: 64'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg2 < arg1:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(27):
        var7.func3(arg2, arg2)
    if arg1 < arg2:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in xrange(25):
        var15 = var13.func7
        var15(var14, arg2)
    var16 = func12()
    var23 = var19(var16, arg2)
    var50 = func16(arg1, var23)
    var51 = (924 - 1344508964) - var50 - -1284673872
    var52 = var16 ^ var16 ^ 2133492664 | var51
    var53 = arg1 | var50 ^ arg1 & var52
    var54 = var51 + (var51 & var16) + arg2
    var55 = (var16 + var16 + -819) + var54
    var56 = var51 - var51 ^ var53 & var16
    var57 = arg1 | arg2
    if var57 < var50:
        var58 = var54 ^ arg1
    else:
        var58 = var55 ^ 404 ^ arg2 & var54
    var59 = var50 - 80
    var60 = var51 - (var55 + var16) - -332
    var61 = var23 - var51 - var16 - var56
    var62 = (-825 + var50) ^ arg1
    var63 = (var54 & var53 ^ arg1) ^ var50
    result = var50 - var55
    return result
def func16(arg24, arg25):
    var26 = arg24 ^ arg24
    var27 = arg25 - (arg25 ^ var26 - arg24)
    var28 = -65 + arg25
    if var26 < var27:
        var29 = (803 - var27) - (var27 ^ var27)
    else:
        var29 = var28 - (arg24 + (var28 - var26))
    var30 = -1723973010 & 614 & var28
    var31 = arg24 ^ (var30 | var28) + -660
    var32 = (var31 - (var30 | arg24)) - -1508466143
    var33 = var32 + var26 ^ var27 ^ 2140445279
    var34 = (-633 & var28) & var27 + var28
    var35 = arg24 ^ var34
    var36 = var33 & var33
    if var30 < var30:
        var37 = -502170425 & var36
    else:
        var37 = var26 - (var27 - var35 & var30)
    var38 = (arg25 ^ var33) & (var31 + -279404032)
    var39 = var33 - var31 ^ var30
    var40 = var35 & var28
    var41 = var34 | arg25
    var42 = var28 ^ arg24 + var35
    var43 = var31 & arg24
    var44 = var34 - var26
    var45 = var39 & 567 | arg25 | var39
    var46 = var35 - -1905954095 - var30 | var35
    if var42 < var45:
        var47 = var43 & var45
    else:
        var47 = var32 & -624069994
    var48 = var36 | -24 & var30 | var41
    if var42 < var30:
        var49 = ((var27 - var44) + var41) & var46
    else:
        var49 = -712 ^ 1962650634 | var36 ^ var26
    result = var36 & var32 - var33 | var43
    return result
def func15(arg20, arg21):
    if arg20 < arg21:
        var22 = (-1148649282 ^ arg21) & -33 | 360
    else:
        var22 = arg21 - 191059776
    result = arg20 ^ arg21 - 72 ^ (arg20 ^ arg20 & (((arg20 & -852) - arg20) - arg20) | arg21 & arg20 | 724)
    return result
def func14():
    closure = [-5]
    def func13(arg17, arg18):
        closure[0] += func15(arg17, arg18)
        return closure[0]
    func = func13
    return func
var19 = func14()
def func12():
    func10()
    result = len(xrange(14))
    func11()
    return result
def func11():
    global len
    del len
def func10():
    global len
    len = lambda x : 3
class class8(object):
    def func7(self, arg11, arg12):
        return 0
class class6(object):
    def func7(self, arg9, arg10):
        return 0
class class4(object):
    def func3(self, arg5, arg6):
        result = arg5 + 1 + 0
        return result
class class2(class4):
    def func3(self, arg3, arg4):
        result = (((0 & arg4 + arg3 + arg3) - -1089847326) & arg4) | arg4
        return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 17'
    print 'arg_number: 64'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    if arg2 < arg1:
        var7 = class2()
    else:
        var7 = class4()
    for var8 in range(27):
        var7.func3(arg2, arg2)
    if arg1 < arg2:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in xrange(25):
        var15 = var13.func7
        var15(var14, arg2)
    var16 = func12()
    var23 = var19(var16, arg2)
    var50 = func16(arg1, var23)
    var51 = (924 - 1344508964) - var50 - -1284673872
    var52 = var16 ^ var16 ^ 2133492664 | var51
    var53 = arg1 | var50 ^ arg1 & var52
    var54 = var51 + (var51 & var16) + arg2
    var55 = (var16 + var16 + -819) + var54
    var56 = var51 - var51 ^ var53 & var16
    var57 = arg1 | arg2
    if var57 < var50:
        var58 = var54 ^ arg1
    else:
        var58 = var55 ^ 404 ^ arg2 & var54
    var59 = var50 - 80
    var60 = var51 - (var55 + var16) - -332
    var61 = var23 - var51 - var16 - var56
    var62 = (-825 + var50) ^ arg1
    var63 = (var54 & var53 ^ arg1) ^ var50
    result = var50 - var55
    return result
def func16(arg24, arg25):
    var26 = arg24 ^ arg24
    var27 = arg25 - (arg25 ^ var26 - arg24)
    var28 = -65 + arg25
    if var26 < var27:
        var29 = (803 - var27) - (var27 ^ var27)
    else:
        var29 = var28 - (arg24 + (var28 - var26))
    var30 = -1723973010 & 614 & var28
    var31 = arg24 ^ (var30 | var28) + -660
    var32 = (var31 - (var30 | arg24)) - -1508466143
    var33 = var32 + var26 ^ var27 ^ 2140445279
    var34 = (-633 & var28) & var27 + var28
    var35 = arg24 ^ var34
    var36 = var33 & var33
    if var30 < var30:
        var37 = -502170425 & var36
    else:
        var37 = var26 - (var27 - var35 & var30)
    var38 = (arg25 ^ var33) & (var31 + -279404032)
    var39 = var33 - var31 ^ var30
    var40 = var35 & var28
    var41 = var34 | arg25
    var42 = var28 ^ arg24 + var35
    var43 = var31 & arg24
    var44 = var34 - var26
    var45 = var39 & 567 | arg25 | var39
    var46 = var35 - -1905954095 - var30 | var35
    if var42 < var45:
        var47 = var43 & var45
    else:
        var47 = var32 & -624069994
    var48 = var36 | -24 & var30 | var41
    if var42 < var30:
        var49 = ((var27 - var44) + var41) & var46
    else:
        var49 = -712 ^ 1962650634 | var36 ^ var26
    result = var36 & var32 - var33 | var43
    return result
def func15(arg20, arg21):
    if arg20 < arg21:
        var22 = (-1148649282 ^ arg21) & -33 | 360
    else:
        var22 = arg21 - 191059776
    result = arg20 ^ arg21 - 72 ^ (arg20 ^ arg20 & (((arg20 & -852) - arg20) - arg20) | arg21 & arg20 | 724)
    return result
def func14():
    closure = [-5]
    def func13(arg17, arg18):
        closure[0] += func15(arg17, arg18)
        return closure[0]
    func = func13
    return func
var19 = func14()
def func12():
    func10()
    result = len(xrange(14))
    func11()
    return result
def func11():
    global len
    del len
def func10():
    global len
    len = lambda x : 3
class class8(object):
    def func7(self, arg11, arg12):
        return 0
class class6(object):
    def func7(self, arg9, arg10):
        return 0
class class4(object):
    def func3(self, arg5, arg6):
        result = arg5 + 1 + 0
        return result
class class2(class4):
    def func3(self, arg3, arg4):
        result = (((0 & arg4 + arg3 + arg3) - -1089847326) & arg4) | arg4
        return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 17'
    print 'arg_number: 64'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
